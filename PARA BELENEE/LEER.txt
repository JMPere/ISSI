-------------------------------------------Pruebas automaticas
CL SCR;
SET SERVEROUTPUT ON;

-- PAQUETE  ASSERT_EQUALS
CREATE OR REPLACE FUNCTION ASSERT_EQUALS (SALIDA BOOLEAN, SALIDA_ESPERADA BOOLEAN) RETURN VARCHAR2 AS 
BEGIN
  IF (SALIDA = SALIDA_ESPERADA) THEN
    RETURN 'ÉXITO';
  ELSE
    RETURN 'FALLO';
  END IF;
END ASSERT_EQUALS;
/


/*Paquete pruebas empleado*/
CREATE OR REPLACE PACKAGE PRUEBAS_EMPLEADO AS
    PROCEDURE INICIALIZAR;
    PROCEDURE INSERTAR( NOMBRE_PRUEBA VARCHAR2, 
                        W_DNI IN EMPLEADO.DNI%TYPE,
                        W_NICKNAME IN EMPLEADO.NICKNAME%TYPE,
                        W_NOMBRE IN EMPLEADO.NOMBRE%TYPE,
                        W_APELLIDOS IN EMPLEADO.APELLIDOS%TYPE,
                        W_FECHA_NACIMIENTO IN EMPLEADO.FECHA_NACIMIENTO%TYPE,
                        W_TELEFONO IN EMPLEADO.TELEFONO%TYPE,
                        W_CORREO IN EMPLEADO.CORREO%TYPE,
                        SALIDA_ESPERADA BOOLEAN);
                        
    PROCEDURE ACTUALIZAR(   NOMBRE_PRUEBA VARCHAR2, 
                            W_DNI IN EMPLEADO.DNI%TYPE,
                            W_NICKNAME IN EMPLEADO.NICKNAME%TYPE,
                            W_NOMBRE IN EMPLEADO.NOMBRE%TYPE,
                            W_APELLIDOS IN EMPLEADO.APELLIDOS%TYPE,
                            W_FECHA_NACIMIENTO IN EMPLEADO.FECHA_NACIMIENTO%TYPE,
                            W_TELEFONO IN EMPLEADO.TELEFONO%TYPE,
                            W_CORREO IN EMPLEADO.CORREO%TYPE,
                            SALIDA_ESPERADA BOOLEAN);
                            
    PROCEDURE ELIMINAR (NOMBRE_PRUEBA VARCHAR2, 
                        W_DNI IN EMPLEADO.DNI%TYPE, 
                        SALIDA_ESPERADA BOOLEAN);
END PRUEBAS_EMPLEADO;


/

CREATE OR REPLACE PACKAGE BODY PRUEBAS_EMPLEADO AS
    
    /* INICIALIZACIÓN */
    PROCEDURE INICIALIZAR AS
    BEGIN
    /* BORRAR CONTENIDO DE LA TABLA */
        DELETE FROM EMPLEADO ;
    END INICIALIZAR;

    PROCEDURE INSERTAR (NOMBRE_PRUEBA VARCHAR2, 
                        W_DNI IN EMPLEADO.DNI%TYPE,
                        W_NICKNAME IN EMPLEADO.NICKNAME%TYPE,
                        W_NOMBRE IN EMPLEADO.NOMBRE%TYPE,
                        W_APELLIDOS IN EMPLEADO.APELLIDOS%TYPE,
                        W_FECHA_NACIMIENTO IN EMPLEADO.FECHA_NACIMIENTO%TYPE,
                        W_TELEFONO IN EMPLEADO.TELEFONO%TYPE,
                        W_CORREO IN EMPLEADO.CORREO%TYPE,
                        SALIDA_ESPERADA BOOLEAN) 
    AS
        SALIDA BOOLEAN := TRUE;
        TIPO_EMPLEADO EMPLEADO%ROWTYPE;
        W_OID_EMPLEADO NUMBER(7);
        
    BEGIN
        INSERT INTO EMPLEADO (DNI, NICKNAME, NOMBRE, APELLIDOS, FECHA_NACIMIENTO, TELEFONO, CORREO) 
            VALUES (W_DNI, W_NICKNAME, W_NOMBRE, W_APELLIDOS, W_FECHA_NACIMIENTO, W_TELEFONO, W_CORREO);

        W_OID_EMPLEADO := INCRE_OID_EMPLEADO.CURRVAL;
        SELECT * INTO TIPO_EMPLEADO FROM EMPLEADO WHERE OID_EMPLEADO = W_OID_EMPLEADO;
        IF (TIPO_EMPLEADO.OID_EMPLEADO <> W_OID_EMPLEADO) THEN
            SALIDA := FALSE;
        END IF;
        COMMIT WORK;

         DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ': ' || ASSERT_EQUALS(SALIDA, SALIDA_ESPERADA));

    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ': ' || ASSERT_EQUALS(FALSE, SALIDA_ESPERADA));
            ROLLBACK;
    END INSERTAR;
    
    PROCEDURE ACTUALIZAR (  NOMBRE_PRUEBA VARCHAR2, 
                        W_DNI IN EMPLEADO.DNI%TYPE,
                        W_NICKNAME IN EMPLEADO.NICKNAME%TYPE,
                        W_NOMBRE IN EMPLEADO.NOMBRE%TYPE,
                        W_APELLIDOS IN EMPLEADO.APELLIDOS%TYPE,
                        W_FECHA_NACIMIENTO IN EMPLEADO.FECHA_NACIMIENTO%TYPE,
                        W_TELEFONO IN EMPLEADO.TELEFONO%TYPE,
                        W_CORREO IN EMPLEADO.CORREO%TYPE,
                            SALIDA_ESPERADA BOOLEAN) 
    AS
        SALIDA BOOLEAN := TRUE;
        TIPO_EMPLEADO EMPLEADO%ROWTYPE;
        
    BEGIN

        UPDATE EMPLEADO
            SET NICKNAME = w_NICKNAME,
                NOMBRE = W_NOMBRE,
                APELLIDOS = W_APELLIDOS,
                FECHA_NACIMIENTO = w_FECHA_NACIMIENTO,
                TELEFONO = W_TELEFONO,
                CORREO = W_CORREO
            WHERE DNI = W_DNI;
            
        SELECT * INTO TIPO_EMPLEADO FROM EMPLEADO WHERE DNI = W_DNI;
    
        IF (TIPO_EMPLEADO.NICKNAME <> W_NICKNAME
            OR TIPO_EMPLEADO.NOMBRE <> W_NOMBRE
            OR TIPO_EMPLEADO.APELLIDOS <> W_APELLIDOS 
            OR TIPO_EMPLEADO.FECHA_NACIMIENTO <> W_FECHA_NACIMIENTO
            OR TIPO_EMPLEADO.TELEFONO <> W_TELEFONO
            OR TIPO_EMPLEADO.CORREO <> W_CORREO ) THEN
            
            SALIDA := FALSE;
        END IF;
        COMMIT WORK;

        DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ': ' || ASSERT_EQUALS(SALIDA, SALIDA_ESPERADA));

    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ': ' || ASSERT_EQUALS(FALSE, SALIDA_ESPERADA));
            ROLLBACK;
    END ACTUALIZAR;
    
     PROCEDURE ELIMINAR (   NOMBRE_PRUEBA VARCHAR2, 
                            W_DNI IN EMPLEADO.DNI%TYPE, 
                            SALIDA_ESPERADA BOOLEAN) 
    AS
        SALIDA BOOLEAN := TRUE;
        N_EMPLEADO INTEGER;
        
    BEGIN
        DELETE FROM EMPLEADO WHERE DNI = W_DNI;
        
        SELECT COUNT(*) INTO N_EMPLEADO FROM EMPLEADO WHERE DNI = W_DNI;
        IF (N_EMPLEADO <> 0) THEN
            SALIDA := FALSE;
        END IF;
        COMMIT WORK;

        DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ': ' || ASSERT_EQUALS(SALIDA, SALIDA_ESPERADA));

    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ': ' || ASSERT_EQUALS(FALSE, SALIDA_ESPERADA));
            ROLLBACK;
    END ELIMINAR;
    
END PRUEBAS_EMPLEADO;
/ 
